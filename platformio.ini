
[platformio]
#default_envs = blink, sensor        ; Which environments to build by default
#extra_configs = common.ini          ; Include shared config from another file
#include_dir = include               ; Custom include folder
#lib_dir = lib                       ; Custom library folder
#src_dir = src                       ; Custom source folder
#data_dir = data                     ; For filesystem uploads (e.g. SPIFFS)
#test_dir = test                     ; Unit test folder
#build_cache_dir = .pio/build_cache ; Cache location
#check_dir = check                   ; Static analysis output
#env_blacklist = legacy              ; Skip building this environment

[env]
;lib_extra_dirs = include
build_type = debug
monitor_filters = esp32_exception_decoder ;see debu_tools.md. allows locating the code location causing crashes
platform = espressif32
framework = espidf
board = super_mini_esp32c3
board_build.flash_size = 4MB
board_build.partitions = default_4MB.csv
monitor_speed = 115200
lib_deps =
    liux-pro/lz4@^0.0.2

build_flags =
    -DAPP_NAME=PXXXA
    ;-DOTA_ENABLED
    -fno-exceptions ;disables C++ exceptions, as ESP fwrk does not handle them and causes aborts.
    -D FLASH4MB -D OPTIM_TSL
    -DLOG_LOCAL_LEVEL=ESP_LOG_DEBUG

check_skip_packages = yes 						; to solve issues with cppcheck with core liraries
extra_scripts = pre:scripts/prebuild_tasks.py   ;required to prepare the correct sdkconfig.defaults based on fragments pulled in using the -D defined for the cative environment
                scripts/postbuild_tasks.py      ;fuills in the compiled size info in the main cpp header

[env:main_noBT]
build_flags= -D DEBUG_MODE
    -I${sysenv.ESP_HEADERS} ; required to pull in the comiplation the secrets.h saved in the centralized credential storage
	;-H
	;-Wp,-v
    ;extends = common
#src_filter = +<main.cpp> -<*>  doesnt work with ESP-IDFF framework. also modify cMakeLists of src folder does not work in ESPIDF framework. Need to change extension, or Pio will include every cpp in the src and subs
[env:main_BT]
build_flags= -D BT_ENABLED -D DEBUG_BUILD
    -I${sysenv.ESP_HEADERS} ; required to pull in the comiplation the secrets.h saved in the centralized credential storage
#src_filter = +<minitest.cpp> -<*>

